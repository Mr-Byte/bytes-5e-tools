(()=>{var t={926:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var s=n(15),i=n.n(s),r=n(645),a=n.n(r)()(i());a.push([t.id,'.active-status-effect-settings .container-grid {\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n  row-gap: 4px;\n  position: absolute;\n  top: 30px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 8px;\n}\n.active-status-effect-settings .container-grid header {\n  border-bottom: 1px solid #782e22;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n.active-status-effect-settings .container-grid header > h2 {\n  justify-self: left;\n  align-self: end;\n  border-bottom: none;\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid header > a {\n  justify-self: right;\n  align-self: end;\n}\n.active-status-effect-settings .container-grid header > a > h2 {\n  border-bottom: none;\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container {\n  overflow: auto;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect {\n  display: grid;\n  grid-template-columns: 32px auto 32px;\n  grid-template-rows: auto auto;\n  border-bottom: 1px solid #c9c7b8;\n  column-gap: 4px;\n  row-gap: 4px;\n  padding-top: 4px;\n  overflow: hidden;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-icon {\n  border: none;\n  width: auto;\n  height: auto;\n  justify-self: center;\n  align-self: center;\n  padding: 2px 0 2px 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-name {\n  justify-self: left;\n  align-self: center;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-name h3 {\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-controls {\n  justify-self: center;\n  align-self: center;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings {\n  grid-column: 1 / span 3;\n  padding: 0px;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings[data-visibility="hidden"] {\n  height: 0px;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings[data-visibility="shown"] {\n  height: auto;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto 1fr;\n  row-gap: 4px;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .selector {\n  opacity: 0;\n  position: absolute;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .selector:checked + .label {\n  text-shadow: 0 0 10px red;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .selector:checked + .label + .panel {\n  display: block;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .label {\n  width: 100%;\n  align-self: end;\n  justify-self: center;\n  text-align: center;\n  cursor: pointer;\n  grid-row: 1;\n  display: block;\n  border-top: 1px solid #c9c7b8;\n  border-bottom: 1px solid #c9c7b8;\n  padding: 8px;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .label:hover {\n  text-shadow: 0 0 10px red;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings div.tabs .panel {\n  display: none;\n  grid-row: 2;\n  grid-column: 1 / span 2;\n}\n.active-status-effect-settings .container-grid footer {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 2px;\n}\n',"",{version:3,sources:["webpack://./styles/active-status-effects-settings.less"],names:[],mappings:"AAEA;EAEI,aAAA;EACA,gCAAA;EACA,YAAA;EACA,kBAAA;EACA,SAAA;EACA,SAAA;EACA,OAAA;EACA,QAAA;EACA,YAAA;AAFJ;AARA;EAaM,gCAAA;EACA,aAAA;EACA,8BAAA;AAFN;AAbA;EAkBQ,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;EACA,SAAA;AAFR;AApBA;EA0BQ,mBAAA;EACA,eAAA;AAHR;AAxBA;EA8BU,mBAAA;EACA,UAAA;EACA,SAAA;AAHV;AA7BA;EAsCM,cAAA;AANN;AAhCA;EAyCQ,aAAA;EACA,qCAAA;EACA,6BAAA;EACA,gCAAA;EACA,eAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;AANR;AA1CA;EAmDU,YAAA;EACA,WAAA;EACA,YAAA;EACA,oBAAA;EACA,kBAAA;EACA,oBAAA;AANV;AAlDA;EA4DU,kBAAA;EACA,kBAAA;AAPV;AAtDA;EAgEY,UAAA;EACA,SAAA;AAPZ;AA1DA;EAsEU,oBAAA;EACA,kBAAA;AATV;AA9DA;EA2EU,uBAAA;EACA,YAAA;AAVV;AAYU;EACE,WAAA;AAVZ;AAaU;EACE,YAAA;AAXZ;AAxEA;EAuFY,aAAA;EACA,8BAAA;EACA,4BAAA;EACA,YAAA;AAZZ;AA9EA;EA6Fc,UAAA;EACA,kBAAA;AAZd;AAegB;EACE,yBAAA;AAblB;AAgBgB;EACE,cAAA;AAdlB;AAxFA;EA4Gc,WAAA;EACA,eAAA;EACA,oBAAA;EACA,kBAAA;EACA,eAAA;EACA,WAAA;EACA,cAAA;EACA,6BAAA;EACA,gCAAA;EACA,YAAA;AAjBd;AAmBc;EACE,yBAAA;AAjBhB;AAvGA;EA6Hc,aAAA;EACA,WAAA;EACA,uBAAA;AAnBd;AA5GA;EAuIM,aAAA;EACA,8BAAA;EACA,eAAA;AAxBN",sourcesContent:['@effect-icon-size: 32px;\n\n.active-status-effect-settings {\n  .container-grid {\n    display: grid;\n    grid-template-rows: 1fr auto 1fr;\n    row-gap: 4px;\n    position: absolute;\n    top: 30px;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    padding: 8px;\n\n    header {\n      border-bottom: 1px solid #782e22;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n\n      > h2 {\n        justify-self: left;\n        align-self: end;\n        border-bottom: none;\n        padding: 0;\n        margin: 0;\n      }\n\n      > a {\n        justify-self: right;\n        align-self: end;\n\n        > h2 {\n          border-bottom: none;\n          padding: 0;\n          margin: 0;\n        }\n      }\n    }\n\n    .status-effects-container {\n      overflow: auto;\n\n      .status-effect {\n        display: grid;\n        grid-template-columns: @effect-icon-size auto 32px;\n        grid-template-rows: auto auto;\n        border-bottom: 1px solid #c9c7b8;\n        column-gap: 4px;\n        row-gap: 4px;\n        padding-top: 4px;\n        overflow: hidden;\n\n        .status-effect-icon {\n          border: none;\n          width: auto;\n          height: auto;\n          justify-self: center;\n          align-self: center;\n          padding: 2px 0 2px 0;\n        }\n\n        .status-effect-name {\n          justify-self: left;\n          align-self: center;\n\n          h3 {\n            padding: 0;\n            margin: 0;\n          }\n        }\n\n        .status-effect-controls {\n          justify-self: center;\n          align-self: center;\n        }\n\n        .status-effect-settings {\n          grid-column: 1 / span 3;\n          padding: 0px;\n\n          &[data-visibility="hidden"] {\n            height: 0px;\n          }\n\n          &[data-visibility="shown"] {\n            height: auto;\n          }\n\n          div.tabs {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            grid-template-rows: auto 1fr;\n            row-gap: 4px;\n\n            .selector {\n              opacity: 0;\n              position: absolute;\n\n              &:checked {\n                & + .label {\n                  text-shadow: 0 0 10px red;\n                }\n\n                & + .label + .panel {\n                  display: block;\n                }\n              }\n            }\n\n            .label {\n              width: 100%;\n              align-self: end;\n              justify-self: center;\n              text-align: center;\n              cursor: pointer;\n              grid-row: 1;\n              display: block;\n              border-top: 1px solid #c9c7b8;\n              border-bottom: 1px solid #c9c7b8;\n              padding: 8px;\n\n              &:hover {\n                text-shadow: 0 0 10px red;\n              }\n            }\n\n            .panel {\n              display: none;\n              grid-row: 2;\n              grid-column: 1 / span 2;\n            }\n          }\n        }\n      }\n    }\n\n    footer {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      column-gap: 2px;\n    }\n  }\n}\n'],sourceRoot:""}]);const o=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,s){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(s)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(i[a]=!0)}for(var o=0;o<t.length;o++){var c=[].concat(t[o]);s&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,s=new Array(e);n<e;n++)s[n]=t[n];return s}t.exports=function(t){var n,s,i=(s=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],s=!0,i=!1,r=void 0;try{for(var a,o=t[Symbol.iterator]();!(s=(a=o.next()).done)&&(n.push(a.value),!e||n.length!==e);s=!0);}catch(t){i=!0,r=t}finally{try{s||null==o.return||o.return()}finally{if(i)throw r}}return n}}(n,s)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var s=Object.prototype.toString.call(t).slice(8,-1);return"Object"===s&&t.constructor&&(s=t.constructor.name),"Map"===s||"Set"===s?Array.from(t):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?e(t,n):void 0}}(n,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=i[1],a=i[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),f="/*# ".concat(c," */"),u=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[r].concat(u).concat([f]).join("\n")}return[r].join("\n")}},468:(t,e,n)=>{var s,i="__lodash_hash_undefined__",r=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/,o=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,f=/\\(\\)?/g,u=/^\[object .+?Constructor\]$/,A=/^(?:0|[1-9]\d*)$/,l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,d="object"==typeof self&&self&&self.Object===Object&&self,p=l||d||Function("return this")(),g=Array.prototype,h=Function.prototype,v=Object.prototype,y=p["__core-js_shared__"],b=(s=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"",E=h.toString,m=v.hasOwnProperty,C=v.toString,_=RegExp("^"+E.call(m).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),w=p.Symbol,x=g.splice,S=U(p,"Map"),O=U(Object,"create"),j=w?w.prototype:void 0,B=j?j.toString:void 0;function k(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}function M(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}function N(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var s=t[e];this.set(s[0],s[1])}}function T(t,e,n){var s=t[e];m.call(t,e)&&R(s,n)&&(void 0!==n||e in t)||(t[e]=n)}function F(t,e){for(var n=t.length;n--;)if(R(t[n][0],e))return n;return-1}function D(t,e){var n,s,i=t.__data__;return("string"==(s=typeof(n=e))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function U(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!H(t)||(e=t,b&&b in e))&&(function(t){var e=H(t)?C.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?_:u).test(function(t){if(null!=t){try{return E.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e}(n)?n:void 0}function I(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||A.test(t))&&t>-1&&t%1==0&&t<e}k.prototype.clear=function(){this.__data__=O?O(null):{}},k.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},k.prototype.get=function(t){var e=this.__data__;if(O){var n=e[t];return n===i?void 0:n}return m.call(e,t)?e[t]:void 0},k.prototype.has=function(t){var e=this.__data__;return O?void 0!==e[t]:m.call(e,t)},k.prototype.set=function(t,e){return this.__data__[t]=O&&void 0===e?i:e,this},M.prototype.clear=function(){this.__data__=[]},M.prototype.delete=function(t){var e=this.__data__,n=F(e,t);return!(n<0||(n==e.length-1?e.pop():x.call(e,n,1),0))},M.prototype.get=function(t){var e=this.__data__,n=F(e,t);return n<0?void 0:e[n][1]},M.prototype.has=function(t){return F(this.__data__,t)>-1},M.prototype.set=function(t,e){var n=this.__data__,s=F(n,t);return s<0?n.push([t,e]):n[s][1]=e,this},N.prototype.clear=function(){this.__data__={hash:new k,map:new(S||M),string:new k}},N.prototype.delete=function(t){return D(this,t).delete(t)},N.prototype.get=function(t){return D(this,t).get(t)},N.prototype.has=function(t){return D(this,t).has(t)},N.prototype.set=function(t,e){return D(this,t).set(t,e),this};var P=L((function(t){var e;t=null==(e=t)?"":function(t){if("string"==typeof t)return t;if(Y(t))return B?B.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(e);var n=[];return o.test(t)&&n.push(""),t.replace(c,(function(t,e,s,i){n.push(s?i.replace(f,"$1"):e||t)})),n}));function G(t){if("string"==typeof t||Y(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function L(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var s=arguments,i=e?e.apply(this,s):s[0],r=n.cache;if(r.has(i))return r.get(i);var a=t.apply(this,s);return n.cache=r.set(i,a),a};return n.cache=new(L.Cache||N),n}function R(t,e){return t===e||t!=t&&e!=e}L.Cache=N;var $=Array.isArray;function H(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Y(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==C.call(t)}t.exports=function(t,e,n){return null==t?t:function(t,e,n,s){if(!H(t))return t;for(var i=-1,o=(e=function(t,e){if($(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Y(t))||a.test(t)||!r.test(t)||null!=e&&t in Object(e)}(e,t)?[e]:function(t){return $(t)?t:P(t)}(e)).length,c=o-1,f=t;null!=f&&++i<o;){var u=G(e[i]),A=n;if(i!=c){var l=f[u];void 0===(A=s?s(l,u,f):void 0)&&(A=H(l)?l:I(e[i+1])?[]:{})}T(f,u,A),f=f[u]}return t}(t,e,n)}},909:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var s=n(379),i=n.n(s),r=n(926);i()(r.Z,{insert:"head",singleton:!1});const a=r.Z.locals||{}},379:(t,e,n)=>{"use strict";var s,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),r=[];function a(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function o(t,e){for(var n={},s=[],i=0;i<t.length;i++){var o=t[i],c=e.base?o[0]+e.base:o[0],f=n[c]||0,u="".concat(c," ").concat(f);n[c]=f+1;var A=a(u),l={css:o[1],media:o[2],sourceMap:o[3]};-1!==A?(r[A].references++,r[A].updater(l)):r.push({identifier:u,updater:g(l,e),references:1}),s.push(u)}return s}function c(t){var e=document.createElement("style"),s=t.attributes||{};if(void 0===s.nonce){var r=n.nc;r&&(s.nonce=r)}if(Object.keys(s).forEach((function(t){e.setAttribute(t,s[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var f,u=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function A(t,e,n,s){var i=n?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(t.styleSheet)t.styleSheet.cssText=u(e,i);else{var r=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function l(t,e,n){var s=n.css,i=n.media,r=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}var d=null,p=0;function g(t,e){var n,s,i;if(e.singleton){var r=p++;n=d||(d=c(e)),s=A.bind(null,n,r,!1),i=A.bind(null,n,r,!0)}else n=c(e),s=l.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s));var n=o(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var s=0;s<n.length;s++){var i=a(n[s]);r[i].references--}for(var c=o(t,e),f=0;f<n.length;f++){var u=a(n[f]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=c}}}},913:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.template=e.modKey=e.MODULE_CONFIG=void 0,e.MODULE_CONFIG={NAME:"bytes-5e-tools",TEMPLATES_ROOT:"modules/bytes-5e-tools/templates"},e.modKey=t=>`${e.MODULE_CONFIG.NAME}.${t}`,e.template=t=>`${e.MODULE_CONFIG.TEMPLATES_ROOT}/${t}`},257:function(t,e,n){"use strict";var s,i=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},r=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ActiveStatusEffectsSettings=void 0;const o=n(913),c=a(n(468));class f extends FormApplication{constructor(t,e){super(t,e),s.set(this,void 0),i(this,s,duplicate(CONFIG.statusEffects))}static init(t){game.settings.registerMenu(o.MODULE_CONFIG.NAME,"active-status-effects",{name:o.modKey("active-status-effects.settings-name"),label:o.modKey("active-status-effects.settings-label"),restricted:!0,type:f,icon:"fas fa-cogs"}),f.defaultStatusEffects=t}static get defaultOptions(){return{...super.defaultOptions,id:`${o.MODULE_CONFIG.NAME}.active-status-effects.settings`,title:o.modKey("active-status-effects.config-title"),classes:["active-status-effect-settings"],template:o.template("settings/active-status-effects.hbs"),width:525,height:400,editable:!0,resizable:!0,submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!0}}getData(t){return{statusEffects:r(this,s).map((t=>({...t,icon:t.icon.split("#")[0]})))}}async _updateObject(t,e){if(!e)return;const n=Object.entries(e).reduce(((t,[e,n])=>e.startsWith("#")?t:c.default(t,e,n)),[]);for(const t of n)t.icon=`${t.icon}#${t.id}`;await game.settings.set(o.MODULE_CONFIG.NAME,"statusEffects",n)}activateListeners(t){super.activateListeners(t),t.find(".status-effect-control").on("click",this.onStatusEffectControlClick.bind(this)),t.find(".status-effect-name").on("click",this.onStatusEffectSettingsToggleClick.bind(this)),t.find(".status-effects-reset").on("click",this.onStatusEffectsResetClick.bind(this))}onStatusEffectControlClick(t){t.preventDefault();const e=t.currentTarget;switch(e.dataset.action){case"create":return void this.createEffect();case"delete":return void this.deleteEffect(e)}}createEffect(){r(this,s).push({id:randomID(),label:"New Effect",icon:"icons/svg/aura.svg"}),this.render()}deleteEffect(t){const e=t.closest(".status-effect")?.dataset.effectId;i(this,s,r(this,s).filter((t=>t.id!==e))),this.render()}onStatusEffectSettingsToggleClick(t){t.preventDefault();const e=t.currentTarget,n=e.closest(".status-effect")?.querySelector(".status-effect-settings");n&&("hidden"===n.dataset.visibility?(n.dataset.visibility="shown",e.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})):n.dataset.visibility="hidden")}onStatusEffectsResetClick(){new Dialog({title:"Reset Defaults",content:"<p>Are you sure you want to discard all changes and reset to the default status effects?</p>",buttons:{ok:{label:"Ok",callback:()=>{i(this,s,duplicate(f.defaultStatusEffects)),this.render()}},cancel:{label:"Cancel"}},default:"cancel"}).render(!0)}}e.ActiveStatusEffectsSettings=f,s=new WeakMap},17:function(t,e,n){"use strict";var s,i=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},r=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.ActiveStatusEffects=void 0;const a=n(913),o=n(257);e.ActiveStatusEffects=class{constructor(){s.set(this,void 0)}init(){i(this,s,CONFIG.statusEffects),this.registerSettings(),this.registerHooks(),o.ActiveStatusEffectsSettings.init(r(this,s))}registerSettings(){game.settings.register(a.MODULE_CONFIG.NAME,"statusEffects",{scope:"world",config:!1,onChange:()=>{this.overrideStatusEffects()}})}registerHooks(){Hooks.on("ready",(()=>{this.overrideStatusEffects()})),Hooks.on("preCreateActiveEffect",((t,e)=>{[e.icon]=e.icon.split("#")}))}async overrideStatusEffects(){const t=await game.settings.get(a.MODULE_CONFIG.NAME,"statusEffects");CONFIG.statusEffects=t??r(this,s)}},s=new WeakMap},884:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenHoverDisplay=void 0,e.TokenHoverDisplay=class{init(){}}}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={id:s,exports:{}};return t[s].call(r.exports,r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";n(909);const t=n(17),e=n(884),s=[t.ActiveStatusEffects,e.TokenHoverDisplay],i=[];Hooks.once("init",(()=>{for(const t of s){const e=new t;e.init(),i.push(e)}Handlebars.registerHelper("b5e_concat",((...t)=>t.slice(0,-1).join("")))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,