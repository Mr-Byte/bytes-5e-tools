(()=>{var t={926:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var r=n(15),s=n.n(r),i=n(645),o=n.n(i)()(s());o.push([t.id,".active-status-effect-settings .container-grid {\n  display: grid;\n  grid-template-rows: 1fr auto 1fr;\n  row-gap: 4px;\n  position: absolute;\n  top: 30px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 8px;\n}\n.active-status-effect-settings .container-grid header {\n  border-bottom: 1px solid #782e22;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n.active-status-effect-settings .container-grid header > h2 {\n  justify-self: left;\n  align-self: end;\n  border-bottom: none;\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid header > a {\n  justify-self: right;\n  align-self: end;\n}\n.active-status-effect-settings .container-grid header > a > h2 {\n  border-bottom: none;\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container {\n  overflow: auto;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect {\n  display: grid;\n  grid-template-columns: 32px auto 32px;\n  grid-template-rows: auto auto;\n  border-bottom: 1px solid #c9c7b8;\n  column-gap: 4px;\n  row-gap: 4px;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-icon {\n  border: none;\n  width: auto;\n  height: auto;\n  justify-self: center;\n  align-self: center;\n  padding: 2px 0 2px 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-name {\n  justify-self: left;\n  align-self: center;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-name h3 {\n  padding: 0;\n  margin: 0;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-controls {\n  justify-self: center;\n  align-self: center;\n}\n.active-status-effect-settings .container-grid .status-effects-container .status-effect .status-effect-settings {\n  grid-column: 1 / span 3;\n  padding: 4px;\n}\n.active-status-effect-settings .container-grid footer {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 2px;\n}\n","",{version:3,sources:["webpack://./styles/active-status-effects-settings.less"],names:[],mappings:"AAEA;EAEI,aAAA;EACA,gCAAA;EACA,YAAA;EACA,kBAAA;EACA,SAAA;EACA,SAAA;EACA,OAAA;EACA,QAAA;EACA,YAAA;AAFJ;AARA;EAaM,gCAAA;EACA,aAAA;EACA,8BAAA;AAFN;AAbA;EAkBQ,kBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;EACA,SAAA;AAFR;AApBA;EA0BQ,mBAAA;EACA,eAAA;AAHR;AAxBA;EA8BU,mBAAA;EACA,UAAA;EACA,SAAA;AAHV;AA7BA;EAsCM,cAAA;AANN;AAhCA;EAyCQ,aAAA;EACA,qCAAA;EACA,6BAAA;EACA,gCAAA;EACA,eAAA;EACA,YAAA;AANR;AAxCA;EAiDU,YAAA;EACA,WAAA;EACA,YAAA;EACA,oBAAA;EACA,kBAAA;EACA,oBAAA;AANV;AAhDA;EA0DU,kBAAA;EACA,kBAAA;AAPV;AApDA;EA8DY,UAAA;EACA,SAAA;AAPZ;AAxDA;EAoEU,oBAAA;EACA,kBAAA;AATV;AA5DA;EAyEU,uBAAA;EACA,YAAA;AAVV;AAhEA;EAgFM,aAAA;EACA,8BAAA;EACA,eAAA;AAbN",sourcesContent:["@effect-icon-size: 32px;\n\n.active-status-effect-settings {\n  .container-grid {\n    display: grid;\n    grid-template-rows: 1fr auto 1fr;\n    row-gap: 4px;\n    position: absolute;\n    top: 30px;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    padding: 8px;\n\n    header {\n      border-bottom: 1px solid #782e22;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n\n      > h2 {\n        justify-self: left;\n        align-self: end;\n        border-bottom: none;\n        padding: 0;\n        margin: 0;\n      }\n\n      > a {\n        justify-self: right;\n        align-self: end;\n\n        > h2 {\n          border-bottom: none;\n          padding: 0;\n          margin: 0;\n        }\n      }\n    }\n\n    .status-effects-container {\n      overflow: auto;\n\n      .status-effect {\n        display: grid;\n        grid-template-columns: @effect-icon-size auto 32px;\n        grid-template-rows: auto auto;\n        border-bottom: 1px solid #c9c7b8;\n        column-gap: 4px;\n        row-gap: 4px;\n\n        .status-effect-icon {\n          border: none;\n          width: auto;\n          height: auto;\n          justify-self: center;\n          align-self: center;\n          padding: 2px 0 2px 0;\n        }\n\n        .status-effect-name {\n          justify-self: left;\n          align-self: center;\n\n          h3 {\n            padding: 0;\n            margin: 0;\n          }\n        }\n\n        .status-effect-controls {\n          justify-self: center;\n          align-self: center;\n        }\n\n        .status-effect-settings {\n          grid-column: 1 / span 3;\n          padding: 4px;\n        }\n      }\n    }\n\n    footer {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      column-gap: 2px;\n    }\n  }\n}\n"],sourceRoot:""}]);const a=o},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(s[o]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,s=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,s=!1,i=void 0;try{for(var o,a=t[Symbol.iterator]();!(r=(o=a.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){s=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(s)throw i}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=s[1],o=s[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),f="/*# ".concat(c," */"),u=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([f]).join("\n")}return[i].join("\n")}},468:(t,e,n)=>{var r,s="__lodash_hash_undefined__",i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/,a=/^\./,c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,f=/\\(\\)?/g,u=/^\[object .+?Constructor\]$/,l=/^(?:0|[1-9]\d*)$/,A="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,d="object"==typeof self&&self&&self.Object===Object&&self,p=A||d||Function("return this")(),g=Array.prototype,h=Function.prototype,v=Object.prototype,y=p["__core-js_shared__"],m=(r=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",b=h.toString,E=v.hasOwnProperty,_=v.toString,C=RegExp("^"+b.call(E).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),w=p.Symbol,O=g.splice,S=I(p,"Map"),j=I(Object,"create"),x=w?w.prototype:void 0,M=x?x.toString:void 0;function N(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function T(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function k(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function F(t,e,n){var r=t[e];E.call(t,e)&&$(r,n)&&(void 0!==n||e in t)||(t[e]=n)}function D(t,e){for(var n=t.length;n--;)if($(t[n][0],e))return n;return-1}function B(t,e){var n,r,s=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?s["string"==typeof e?"string":"hash"]:s.map}function I(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!H(t)||(e=t,m&&m in e))&&(function(t){var e=H(t)?_.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?C:u).test(function(t){if(null!=t){try{return b.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e}(n)?n:void 0}function U(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||l.test(t))&&t>-1&&t%1==0&&t<e}N.prototype.clear=function(){this.__data__=j?j(null):{}},N.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},N.prototype.get=function(t){var e=this.__data__;if(j){var n=e[t];return n===s?void 0:n}return E.call(e,t)?e[t]:void 0},N.prototype.has=function(t){var e=this.__data__;return j?void 0!==e[t]:E.call(e,t)},N.prototype.set=function(t,e){return this.__data__[t]=j&&void 0===e?s:e,this},T.prototype.clear=function(){this.__data__=[]},T.prototype.delete=function(t){var e=this.__data__,n=D(e,t);return!(n<0||(n==e.length-1?e.pop():O.call(e,n,1),0))},T.prototype.get=function(t){var e=this.__data__,n=D(e,t);return n<0?void 0:e[n][1]},T.prototype.has=function(t){return D(this.__data__,t)>-1},T.prototype.set=function(t,e){var n=this.__data__,r=D(n,t);return r<0?n.push([t,e]):n[r][1]=e,this},k.prototype.clear=function(){this.__data__={hash:new N,map:new(S||T),string:new N}},k.prototype.delete=function(t){return B(this,t).delete(t)},k.prototype.get=function(t){return B(this,t).get(t)},k.prototype.has=function(t){return B(this,t).has(t)},k.prototype.set=function(t,e){return B(this,t).set(t,e),this};var P=R((function(t){var e;t=null==(e=t)?"":function(t){if("string"==typeof t)return t;if(Y(t))return M?M.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(e);var n=[];return a.test(t)&&n.push(""),t.replace(c,(function(t,e,r,s){n.push(r?s.replace(f,"$1"):e||t)})),n}));function L(t){if("string"==typeof t||Y(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function R(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,s=e?e.apply(this,r):r[0],i=n.cache;if(i.has(s))return i.get(s);var o=t.apply(this,r);return n.cache=i.set(s,o),o};return n.cache=new(R.Cache||k),n}function $(t,e){return t===e||t!=t&&e!=e}R.Cache=k;var G=Array.isArray;function H(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Y(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==_.call(t)}t.exports=function(t,e,n){return null==t?t:function(t,e,n,r){if(!H(t))return t;for(var s=-1,a=(e=function(t,e){if(G(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Y(t))||o.test(t)||!i.test(t)||null!=e&&t in Object(e)}(e,t)?[e]:function(t){return G(t)?t:P(t)}(e)).length,c=a-1,f=t;null!=f&&++s<a;){var u=L(e[s]),l=n;if(s!=c){var A=f[u];void 0===(l=r?r(A,u,f):void 0)&&(l=H(A)?A:U(e[s+1])?[]:{})}F(f,u,l),f=f[u]}return t}(t,e,n)}},909:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>o});var r=n(379),s=n.n(r),i=n(926);s()(i.Z,{insert:"head",singleton:!1});const o=i.Z.locals||{}},379:(t,e,n)=>{"use strict";var r,s=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function o(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],s=0;s<t.length;s++){var a=t[s],c=e.base?a[0]+e.base:a[0],f=n[c]||0,u="".concat(c," ").concat(f);n[c]=f+1;var l=o(u),A={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(A)):i.push({identifier:u,updater:g(A,e),references:1}),r.push(u)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var o=s(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var f,u=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function l(t,e,n,r){var s=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,s);else{var i=document.createTextNode(s),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}function A(t,e,n){var r=n.css,s=n.media,i=n.sourceMap;if(s?t.setAttribute("media",s):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,p=0;function g(t,e){var n,r,s;if(e.singleton){var i=p++;n=d||(d=c(e)),r=l.bind(null,n,i,!1),s=l.bind(null,n,i,!0)}else n=c(e),r=A.bind(null,n,e),s=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else s()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var s=o(n[r]);i[s].references--}for(var c=a(t,e),f=0;f<n.length;f++){var u=o(n[f]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},913:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.template=e.modKey=e.MODULE_CONFIG=void 0,e.MODULE_CONFIG={NAME:"bytes-5e-tools",TEMPLATES_ROOT:"modules/bytes-5e-tools/templates"},e.modKey=t=>`${e.MODULE_CONFIG.NAME}.${t}`,e.template=t=>`${e.MODULE_CONFIG.TEMPLATES_ROOT}/${t}`},257:function(t,e,n){"use strict";var r,s=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},i=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ActiveStatusEffectsSettings=void 0;const a=n(913),c=o(n(468));class f extends FormApplication{constructor(t,e){super(t,e),r.set(this,void 0),s(this,r,duplicate(CONFIG.statusEffects))}static init(t){game.settings.registerMenu(a.MODULE_CONFIG.NAME,"active-status-effects",{name:a.modKey("active-status-effects.settings-name"),label:a.modKey("active-status-effects.settings-label"),restricted:!0,type:f,icon:"fas fa-cogs"}),f.defaultStatusEffects=t}static get defaultOptions(){return{...super.defaultOptions,id:`${a.MODULE_CONFIG.NAME}.active-status-effects.settings`,title:a.modKey("active-status-effects.config-title"),classes:["active-status-effect-settings"],template:a.template("settings/active-status-effects.hbs"),width:525,height:400,editable:!0,resizable:!0,submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!0}}getData(t){return{statusEffects:i(this,r).map((t=>({...t,icon:t.icon.split("#")[0]})))}}activateListeners(t){super.activateListeners(t),t.find(".status-effect-control").on("click",this.onStatusEffectControl.bind(this)),t.find(".status-effect-name").on("click",this.onToggleStatusEffectSettings.bind(this)),t.find(".status-effects-reset").on("click",this.onReset.bind(this))}onStatusEffectControl(t){t.preventDefault();const e=t.currentTarget;switch(e.dataset.action){case"create":return void this.createEffect();case"delete":return void this.deleteEffect(e)}}onToggleStatusEffectSettings(t){t.preventDefault();const e=t.currentTarget.closest(".status-effect")?.querySelector(".status-effect-settings");e&&(e.style.display="none"===e.style.display?"block":"none")}onReset(){new Dialog({title:"Reset Defaults",content:"<p>Are you sure you want to discard all changes and reset to the default status effects?</p>",buttons:{ok:{label:"Ok",callback:()=>{s(this,r,f.defaultStatusEffects),this.render()}},cancel:{label:"Cancel"}},default:"cancel"}).render(!0)}createEffect(){i(this,r).push({id:randomID(),label:"New Effect",icon:"icons/svg/aura.svg"}),this.render()}deleteEffect(t){const e=t.closest(".status-effect")?.dataset.effectId;s(this,r,i(this,r).filter((t=>t.id!==e))),this.render()}async _updateObject(t,e){if(!e)return;const n=Object.entries(e).reduce(((t,[e,n])=>c.default(t,e,n)),[]);for(const t of n)t.icon=`${t.icon}#${t.id}`;await game.settings.set(a.MODULE_CONFIG.NAME,"statusEffects",n)}}e.ActiveStatusEffectsSettings=f,r=new WeakMap},17:function(t,e,n){"use strict";var r,s=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},i=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};Object.defineProperty(e,"__esModule",{value:!0}),e.ActiveStatusEffects=void 0;const o=n(913),a=n(257);e.ActiveStatusEffects=class{constructor(){r.set(this,void 0)}init(){s(this,r,CONFIG.statusEffects),this.registerSettings(),this.registerHooks(),a.ActiveStatusEffectsSettings.init(i(this,r))}registerSettings(){game.settings.register(o.MODULE_CONFIG.NAME,"statusEffects",{scope:"world",config:!1,onChange:()=>{this.overrideStatusEffects()}})}registerHooks(){Hooks.on("ready",(()=>{this.overrideStatusEffects()})),Hooks.on("preCreateActiveEffect",((t,e)=>{e.icon=e.icon.split("#")[0]}))}async overrideStatusEffects(){const t=await game.settings.get(o.MODULE_CONFIG.NAME,"statusEffects");CONFIG.statusEffects=t??i(this,r)}},r=new WeakMap},884:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenHoverDisplay=void 0,e.TokenHoverDisplay=class{init(){}}}},e={};function n(r){var s=e[r];if(void 0!==s)return s.exports;var i=e[r]={id:r,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";n(909);const t=n(17),e=n(884),r=[t.ActiveStatusEffects,e.TokenHoverDisplay],s=[];Hooks.once("init",(()=>{for(const t of r){const e=new t;e.init(),s.push(e)}Handlebars.registerHelper("b5e_concat",((...t)=>t.slice(0,-1).join("")))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,